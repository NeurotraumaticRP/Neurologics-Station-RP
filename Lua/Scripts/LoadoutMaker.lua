-- LoadoutMaker: Scan your current loadout and save it to a file
-- Usage: !saveloadout "charactername"

-- Slot type number to name mapping
local slotTypeNames = {
    [0] = "InvSlotType.None",
    [1] = "InvSlotType.Any",
    [2] = "InvSlotType.RightHand",
    [4] = "InvSlotType.LeftHand",
    [8] = "InvSlotType.Head",
    [16] = "InvSlotType.InnerClothes",
    [32] = "InvSlotType.OuterClothes",
    [64] = "InvSlotType.Headset",
    [128] = "InvSlotType.Card",
    [256] = "InvSlotType.Bag",
    [512] = "InvSlotType.HealthInterface"
}

Neurologics.AddCommand("!saveloadout", function(client, args)
    if not client.HasPermission(ClientPermissions.ConsoleCommands) then return end
    
    if client.Character == nil or client.Character.IsDead then
        Neurologics.SendMessage(client, "You must be alive to save your loadout.")
        return true
    end
    
    if #args < 1 then
        Neurologics.SendMessage(client, "Usage: !saveloadout \"charactername\"")
        return true
    end
    
    local loadoutName = string.lower(args[1])
    local character = client.Character
    
    -- Build inventory list
    local inventoryData = {}
    
    for slot = 0, character.Inventory.Capacity - 1 do
        local item = character.Inventory.GetItemAt(slot)
        if item then
            local itemData = {
                id = item.Prefab.Identifier.Value,
                count = 1
            }
            
            -- Detect slot type
            local slotTypes = character.Inventory.SlotTypes
            if slotTypes and slotTypes[slot] then
                local slotType = slotTypes[slot]
                local slotValue = tonumber(slotType)
                
                -- Only add slot if it's a specific equipment slot (not Any)
                if slotValue and slotValue ~= 1 then
                    -- Convert to proper name if we have a mapping, otherwise use the number
                    itemData.slot = slotTypeNames[slotValue] or slotValue
                end
            end
            
            -- Scan for sub-items
            if item.OwnInventory then
                local subItems = {}
                for subSlot = 0, item.OwnInventory.Capacity - 1 do
                    local subItem = item.OwnInventory.GetItemAt(subSlot)
                    if subItem then
                        table.insert(subItems, {
                            id = subItem.Prefab.Identifier.Value,
                            count = 1
                        })
                    end
                end
                if #subItems > 0 then
                    itemData.subItems = subItems
                end
            end
            
            table.insert(inventoryData, itemData)
        end
    end
    
    -- Format as Lua code
    local output = {}
    table.insert(output, "-- Generated by LoadoutMaker for: " .. client.Name)
    table.insert(output, "-- Loadout name: " .. loadoutName)
    table.insert(output, "")
    table.insert(output, "NCS.Char[\"" .. loadoutName .. "\"] = {")
    table.insert(output, "    Team = CharacterTeamType.Team1,")
    table.insert(output, "    Prefix = \"" .. loadoutName:gsub("^%l", string.upper) .. "\",")
    table.insert(output, "    BaseJob = \"assistant\",")
    table.insert(output, "    Species = \"human\",")
    table.insert(output, "    Inventory = {")
    
    -- Add each item
    for i, itemData in ipairs(inventoryData) do
        local itemLine = "        {"
        itemLine = itemLine .. " id = \"" .. itemData.id .. "\", count = " .. itemData.count
        
        -- Add sub-items if present
        if itemData.subItems then
            itemLine = itemLine .. ", subItems = {"
            for j, subItem in ipairs(itemData.subItems) do
                itemLine = itemLine .. " { id = \"" .. subItem.id .. "\", count = " .. subItem.count .. " }"
                if j < #itemData.subItems then
                    itemLine = itemLine .. ","
                end
            end
            itemLine = itemLine .. " }"
        end
        
        -- Add slot if present
        if itemData.slot then
            itemLine = itemLine .. ", slot = " .. itemData.slot
        end
        
        itemLine = itemLine .. " }"
        if i < #inventoryData then
            itemLine = itemLine .. ","
        end
        
        table.insert(output, itemLine)
    end
    
    table.insert(output, "    }")
    table.insert(output, "}")
    table.insert(output, "")
    
    -- Write to file
    local filePath = Neurologics.Path .. "/Lua/Loadouts/" .. loadoutName .. ".txt"
    local content = table.concat(output, "\n")
    
    -- Ensure Loadouts directory exists
    File.CreateDirectory(Neurologics.Path .. "/Lua/Loadouts")
    
    File.Write(filePath, content)
    
    Neurologics.SendMessage(client, "Loadout saved to: Lua/Loadouts/" .. loadoutName .. ".txt")
    Neurologics.SendMessage(client, "Items scanned: " .. #inventoryData)
    print("[Neurologics/LoadoutMaker] Saved loadout: " .. loadoutName .. " for " .. client.Name)
    
    return true
end)

print("[Neurologics/LoadoutMaker] Loaded - use !saveloadout \"name\" to save your current loadout")

